/*
Copyright 2021 zhangfuli.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "HFOperator/api/hlf.zhangfuli.com/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FabricOrderingServiceLister helps list FabricOrderingServices.
type FabricOrderingServiceLister interface {
	// List lists all FabricOrderingServices in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.FabricOrderingService, err error)
	// FabricOrderingServices returns an object that can list and get FabricOrderingServices.
	FabricOrderingServices(namespace string) FabricOrderingServiceNamespaceLister
	FabricOrderingServiceListerExpansion
}

// fabricOrderingServiceLister implements the FabricOrderingServiceLister interface.
type fabricOrderingServiceLister struct {
	indexer cache.Indexer
}

// NewFabricOrderingServiceLister returns a new FabricOrderingServiceLister.
func NewFabricOrderingServiceLister(indexer cache.Indexer) FabricOrderingServiceLister {
	return &fabricOrderingServiceLister{indexer: indexer}
}

// List lists all FabricOrderingServices in the indexer.
func (s *fabricOrderingServiceLister) List(selector labels.Selector) (ret []*v1alpha1.FabricOrderingService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FabricOrderingService))
	})
	return ret, err
}

// FabricOrderingServices returns an object that can list and get FabricOrderingServices.
func (s *fabricOrderingServiceLister) FabricOrderingServices(namespace string) FabricOrderingServiceNamespaceLister {
	return fabricOrderingServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FabricOrderingServiceNamespaceLister helps list and get FabricOrderingServices.
type FabricOrderingServiceNamespaceLister interface {
	// List lists all FabricOrderingServices in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.FabricOrderingService, err error)
	// Get retrieves the FabricOrderingService from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.FabricOrderingService, error)
	FabricOrderingServiceNamespaceListerExpansion
}

// fabricOrderingServiceNamespaceLister implements the FabricOrderingServiceNamespaceLister
// interface.
type fabricOrderingServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FabricOrderingServices in the indexer for a given namespace.
func (s fabricOrderingServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FabricOrderingService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FabricOrderingService))
	})
	return ret, err
}

// Get retrieves the FabricOrderingService from the indexer for a given namespace and name.
func (s fabricOrderingServiceNamespaceLister) Get(name string) (*v1alpha1.FabricOrderingService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("fabricorderingservice"), name)
	}
	return obj.(*v1alpha1.FabricOrderingService), nil
}
