/*
Copyright 2021 zhangfuli.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	"github.com/operator-framework/operator-lib/status"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN!
// NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized.

// FabricCASpec defines the desired state of FabricCA
type FabricCASpec struct {
	// +optional
	// +kubebuilder:validation:Optional
	// +nullable
	// +kubebuilder:validation:Default={}
	Tolerations []corev1.Toleration `json:"tolerations"`

	// +optional
	// +nullable
	ServiceMonitor *ServiceMonitor `json:"serviceMonitor"`
	// +optional
	// +kubebuilder:validation:Optional
	// +nullable
	Istio    *FabricIstio     `json:"istio"`
	Database FabricCADatabase `json:"db"`
	// +kubebuilder:validation:MinItems=1
	// Hosts for the Fabric CA
	Hosts   []string            `json:"hosts"`
	Service FabricCASpecService `json:"service"`
	// +kubebuilder:validation:MinLength=1
	Image string `json:"image"`
	// +kubebuilder:validation:MinLength=1
	Version string `json:"version"`
	// +kubebuilder:default:=false
	Debug bool `json:"debug"`
	// +kubebuilder:default:=512000
	CLRSizeLimit int              `json:"clrSizeLimit"`
	TLS          FabricCATLSConf  `json:"rootCA"`
	CA           FabricCAItemConf `json:"ca"`
	TLSCA        FabricCAItemConf `json:"tlsCA"`
	Cors         Cors             `json:"cors"`

	Resources corev1.ResourceRequirements `json:"resources"`
	Storage   Storage                     `json:"storage"`
	Metrics   FabricCAMetrics             `json:"metrics"`

	// +nullable
	// +kubebuilder:validation:Optional
	// +optional
	// +kubebuilder:validation:Default={}
	Env []corev1.EnvVar `json:"env"`
}

// FabricCAStatus defines the observed state of FabricCA
type FabricCAStatus struct {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
	// Important: Run "make" to regenerate code after modifying this file
	Conditions status.Conditions `json:"conditions"`
	Message    string            `json:"message"`
	// Status of the FabricCA
	Status DeploymentStatus `json:"status"`

	// +optional
	NodePort int `json:"nodePort"`
	// TLS Certificate to connect to the FabricCA
	TlsCert string `json:"tls_cert"`
	// Root certificate for Sign certificates generated by FabricCA
	CACert string `json:"ca_cert"`
	// Root certificate for TLS certificates generated by FabricCA
	TLSCACert string `json:"tlsca_cert"`
}

// +kubebuilder:object:root=true

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:defaulter-gen=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Namespaced,shortName=ca,singular=ca
// +kubebuilder:printcolumn:name="State",type="string",JSONPath=".status.status"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +k8s:openapi-gen=true

// FabricCA is the Schema for the fabriccas API
type FabricCA struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   FabricCASpec   `json:"spec,omitempty"`
	Status FabricCAStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FabricCAList contains a list of FabricCA
type FabricCAList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FabricCA `json:"items"`
}

func init() {
	SchemeBuilder.Register(&FabricCA{}, &FabricCAList{})
}
